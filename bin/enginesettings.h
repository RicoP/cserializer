///////////////////////////////////////////////////////////////////
// AUTOGENERATED do not edit by hand                             //
///////////////////////////////////////////////////////////////////
#pragma once
#include <components/computils.h>
#include <serializer/serializer.h>
#include <rose/ecs.h>
#include <cstring>

struct EngineSettings {
  bool raytracer;

};

 void construct_defaults(EngineSettings & o) {
  std::memset(&o, 0, sizeof(EngineSettings));
  o.raytracer = true;
}

 bool operator==(const EngineSettings &lhs, const EngineSettings &rhs) {
  return lhs.equals(rhs);
}

 bool operator!=(const EngineSettings &lhs, const EngineSettings &rhs) {
  return !lhs.equals(rhs);
}

///////////////////////////////////////////////////////////////////
// serializer                                                    //
///////////////////////////////////////////////////////////////////
 void serialize(EngineSettings &o, ISerializer &s) {
  if(s.node_begin("EngineSettings", rose::hash("EngineSettings"), &o)) {
    s.key("raytracer");
    serialize(o.raytracer, s);
    s.node_end();
  }
  s.end();
}

///////////////////////////////////////////////////////////////////
// deserializer                                                  //
///////////////////////////////////////////////////////////////////
 void deserialize(EngineSettings &o, IDeserializer &s) {
  construct_defaults(o);

  while (s.next_key()) {
    switch (s.hash_key()) {
      case rose::hash("raytracer"):
        deserialize(o.raytracer, s);
        break;
      default: s.skip_key(); break;
    }
  }
}

///////////////////////////////////////////////////////////////////
// randomize                                                     //
///////////////////////////////////////////////////////////////////
 void randomize(EngineSettings &o, rose::hash_value & h) {
  randomize(o.raytracer, h);
}

///////////////////////////////////////////////////////////////////
// hashing                                                       //
///////////////////////////////////////////////////////////////////
   hash_value hash(ecs::EngineSettings &o) {
    hash_value h = hash(o.raytracer);
    return h;
  }
